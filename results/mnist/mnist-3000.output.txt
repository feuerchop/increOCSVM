['../evaluation_2.py', '3000']
mnist classes = 1
size: 3000
Confusion matrix:
[[1612  744]
 [ 443  201]]
precision: 0.212698412698, recall: 0.312111801242, f1-score: 0.252989301447
Wrote profile results to evaluation_2.py.lprof
Timer unit: 1e-06 s

Total time: 1051.3 s
File: ../ocsvm.py
Function: increment at line 97

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    97                                               @profile
    98                                               def increment(self, Xc, init_ac=0, break_count=-1):
    99                                                   # epsilon
   100         1            6      6.0      0.0          e = self._data._e
   101         1            4      4.0      0.0          mu = 0
   102                                           
   103                                                   # initialize existing X, coefficients a, C
   104         1            6      6.0      0.0          X_origin = self._data.X()
   105         1            6      6.0      0.0          K_X_origin = self._data.K_X()
   106         1            5      5.0      0.0          n_data = X_origin.shape[0]
   107         1            3      3.0      0.0          n_feature = X_origin.shape[1]
   108                                           
   109         1            6      6.0      0.0          C = self._data.C()
   110         1            5      5.0      0.0          a_origin = self._data.alpha()
   111                                           
   112                                                   # number of new incremental points
   113         1            4      4.0      0.0          n_new = Xc.shape[0]
   114                                           
   115                                                   # number of all (new and existing) points
   116         1            3      3.0      0.0          n_all = n_data + n_new
   117                                           
   118                                                   # concatenate all new points with all existing points
   119         1           17     17.0      0.0          X = empty((n_new + n_data, n_feature))
   120         1        11619  11619.0      0.0          X[0:n_new, :] = Xc
   121         1         5463   5463.0      0.0          X[n_new:, :] = X_origin
   122                                           
   123                                                   # create kernel matrix for all new and existing points
   124                                           
   125                                                   # create of all data points
   126         1            7      7.0      0.0          if K_X_origin == None:
   127         1      1543336 1543336.0      0.1              K_X = self.gram(X)
   128                                                   else:
   129                                                       K_X = empty((n_all, n_all))
   130                                                       K_X[n_new:, n_new:] = K_X_origin
   131                                                       K_X_new = self.gram(Xc, X_origin)
   132                                                       K_X[0:n_new, :] = K_X_new
   133                                                       K_X[:, 0:n_new] = K_X_new.T
   134                                           
   135                                                   # creating coefficient vector alpha for all data points
   136         1           39     39.0      0.0          a = empty(n_all)
   137         1           14     14.0      0.0          a[n_new:] = a_origin
   138         1           14     14.0      0.0          a[:n_new] = init_ac
   139                                           
   140                                                   # creating gradient vector
   141         1           12     12.0      0.0          g = zeros(n_all)
   142                                           
   143                                                   # create sensitivity vector
   144         1            6      6.0      0.0          gamma = empty(n_all)
   145         1            4      4.0      0.0          check_gradient = False
   146                                                   # loop through all new points to increment
   147      2053         9667      4.7      0.0          for x_count in range(n_new):
   148                                           
   149                                                       #print "--------- START %s ---------" % x_count
   150                                           
   151      2052         7655      3.7      0.0              if x_count == break_count:
   152                                                           self._data.set_X(X)
   153                                                           self._data.set_alpha(a)
   154                                                           self._data.set_C(C)
   155                                                           self._data.set_K_X(K_X)
   156                                                           self.rho()
   157                                                           return False
   158                                           
   159                                                       # initialize X, a, C, g, indices, kernel values
   160      2052         7676      3.7      0.0              start_origin = n_new - x_count
   161      2052         6542      3.2      0.0              start_new = start_origin - 1
   162                                           
   163      2052         6494      3.2      0.0              if x_count == 0:
   164         1            3      3.0      0.0                  inds = []
   165         1            4      4.0      0.0                  indr = []
   166         1            4      4.0      0.0                  inde = []
   167         1            3      3.0      0.0                  indo = []
   168       949         3108      3.3      0.0                  for i in range(n_new, n_all):
   169       948         4901      5.2      0.0                      if e < a[i] < C - e:
   170       948         3197      3.4      0.0                          inds.append(i)
   171                                                               else:
   172                                                                   indr.append(i)
   173                                                                   if a[i] <= e:
   174                                                                       indo.append(i)
   175                                                                   else:
   176                                                                       inde.append(i)
   177                                           
   178         1            4      4.0      0.0                  ls = len(inds)                               # support vectors length
   179         1            3      3.0      0.0                  lr = len(indr)                               # error and non-support vectors length
   180         1            3      3.0      0.0                  le = len(inde)                               # error vectors lenght
   181         1            3      3.0      0.0                  lo = len(indo)
   182                                                           #mu_old = mu
   183         1          104    104.0      0.0                  mu = - K_X[inds[0], :][start_origin:].dot(a[start_origin:])
   184         1            4      4.0      0.0                  if lr > 0:
   185                                                               g[indr] = K_X[indr, :][:, start_origin:].dot(a[start_origin:]) + mu
   186                                                           # calculate mu according to KKT-conditions
   187                                           
   188                                           
   189      2052       144308     70.3      0.0              c_inds = [start_new] + inds
   190                                           
   191                                                       # kernel of support vectors
   192      2052    770348540 375413.5     73.3              Kss = K_X[:, inds][inds, :]
   193                                                       #print "difference indo: %s" % unique(round(K_X[indo, :][:, start_origin:].dot(a[start_origin:]) + mu - g[indo],6))
   194                                                       #check_gradient = True
   195                                                       #if check_gradient:
   196                                                           #g[indr] = K_X[indr, :][:, start_origin:].dot(a[start_origin:]) + mu
   197                                                           #g[indo] += K_X[indo[0], :][start_origin:].dot(a[start_origin:]) + mu - g[indo[0]]
   198                                                           #check_gradient = False
   199                                                           #print "difference indo: %s" % unique(round(K_X[indo, :][:, start_origin:].dot(a[start_origin:]) + mu - g[indo],6))
   200      2052        17421      8.5      0.0              if ls > 0:
   201      2052       325533    158.6      0.0                  gc = K_X[start_new, start_origin:].dot(a[start_origin:]) + mu
   202                                           
   203      2052         9167      4.5      0.0              ac = a[start_new]
   204                                           
   205      2052         7403      3.6      0.0              if x_count == 0:
   206         1         1712   1712.0      0.0                  Q = ones((ls+1, ls+1))
   207         1            7      7.0      0.0                  Q[0, 0] = 0
   208         1         2709   2709.0      0.0                  Q[1:, 1:] = Kss
   209         1            5      5.0      0.0                  try:
   210         1       383921 383921.0      0.0                      R = inv(Q)
   211                                                           except np.linalg.linalg.LinAlgError:
   212                                                               x = 1e-11
   213                                                               found = False
   214                                                               print "singular matrix"
   215                                                               while not found:
   216                                                                   try:
   217                                                                       R = inv(Q + diag(ones(ls+1) * x))
   218                                                                       found = True
   219                                                                   except np.linalg.linalg.LinAlgError:
   220                                                                       x = x*10
   221      2052         6965      3.4      0.0              loop_count = 1
   222      2052        27966     13.6      0.0              while gc < e and ac < C - e:
   223      2052         7003      3.4      0.0                  if ls == 0: check_gradient = True
   224                                                           #print "-------------------- incremental %s ---------" % loop_count
   225                                                           #print "len inds: %s" % len(inds)
   226      2052         6724      3.3      0.0                  if ls > 0:
   227      2052      1284530    626.0      0.1                      n = K_X[start_new, :][c_inds]
   228      2052     17428430   8493.4      1.7                      beta = - R.dot(n)
   229      2052        19692      9.6      0.0                      betas = beta[1:]
   230                                           
   231                                                           # calculate gamma
   232      2052         8360      4.1      0.0                  if lr > 0 and ls > 0:
   233                                                               gamma_tmp = K_X[:, c_inds][start_new:]
   234                                                               gamma_tmp[:, 0] = 1
   235                                                               gamma[start_new:] = gamma_tmp.dot(beta) + K_X[start_new, :][start_new:]
   236                                                               gammac = gamma[start_new]
   237                                           
   238      2052         7352      3.6      0.0                  elif ls > 0:
   239                                                               # empty R set
   240      2052      1947177    948.9      0.2                      gammac = K_X[start_new, :][:, c_inds].dot(beta) + 1
   241                                           
   242                                                           else:
   243                                                               # empty S set
   244                                                               gammac = 1
   245                                                               gamma[indr] = 1
   246                                                               #gamma[indo] = -1
   247                                           
   248                                                           # accounting
   249                                                           #case 1: Some alpha_i in S reaches a bound
   250      2052         8025      3.9      0.0                  if ls > 0:
   251      2052        44611     21.7      0.0                      IS_plus = betas > e
   252      2052        28616     13.9      0.0                      IS_minus = betas < - e
   253      2052        99425     48.5      0.0                      gsmax = empty(ls)*inf
   254      2052       886805    432.2      0.1                      gsmax[IS_plus] = -a[inds][IS_plus]
   255      2052        54745     26.7      0.0                      gsmax[IS_plus] += C
   256      2052       888890    433.2      0.1                      gsmax[IS_minus] = - a[inds][IS_minus]
   257      2052        48592     23.7      0.0                      gsmax = divide(gsmax, betas)
   258      2052       597455    291.2      0.1                      gsmin = min(absolute(gsmax))
   259                                                               #print where(absolute(gsmax) == gsmin)
   260      2052        83315     40.6      0.0                      ismin = where(absolute(gsmax) == gsmin)[0][0]
   261                                           
   262                                                           else: gsmin = inf
   263                                           
   264                                                           #case 2: Some g_i in E reaches zero
   265      2052         7493      3.7      0.0                  if le > 0:
   266                                                               Ie_plus = gamma[inde] > e
   267                                                               if len(g[inde][Ie_plus]) > 0:
   268                                                                   gec = divide(-g[inde][Ie_plus], gamma[inde][Ie_plus])
   269                                                                   gec[gec <= 0] = inf
   270                                                                   gemin = min(gec)
   271                                                                   if gemin < inf:
   272                                                                       iemin = where(gec == gemin)[0][0]
   273                                                               else: gemin = inf
   274      2052         7141      3.5      0.0                  else: gemin = inf
   275                                                           #case 2: Some g_i in O reaches zero
   276      2052         6923      3.4      0.0                  if lo > 0 and ls > 0:
   277                                                               Io_minus = gamma[indo] < - e
   278                                                               if len(g[indo][Io_minus]) > 0:
   279                                                                   goc = divide(-g[indo][Io_minus], gamma[indo][Io_minus])
   280                                                                   goc[goc <= 0] = inf
   281                                                                   goc[g[indo][Io_minus] < 0] = inf
   282                                                                   gomin = min(goc)
   283                                                                   if gomin < inf:
   284                                                                       iomin = where(goc == gomin)[0][0]
   285                                                               else: gomin = inf
   286      2052         7260      3.5      0.0                  else: gomin = inf
   287                                           
   288                                                           # case 3: gc becomes zero
   289      2052        15638      7.6      0.0                  if gammac > e: gcmin = - gc/gammac
   290                                                           else: gcmin = inf
   291                                           
   292                                                           # case 4
   293      2052        11706      5.7      0.0                  if ls > 0: gacmin = C - ac
   294                                                           else: gacmin = inf
   295                                           
   296                                                           # determine minimum largest increment
   297      2052        10115      4.9      0.0                  all_deltas = [gsmin, gemin, gomin, gcmin, gacmin]
   298      2052        14163      6.9      0.0                  gmin = min(all_deltas)
   299      2052        47667     23.2      0.0                  imin = where(all_deltas == gmin)[0][0]
   300                                                           # update a, g
   301      2052         7363      3.6      0.0                  if ls > 0:
   302      2052        10845      5.3      0.0                      mu += beta[0]*gmin
   303      2052         7987      3.9      0.0                      ac += gmin
   304      2052      1631707    795.2      0.2                      a[inds] += betas*gmin
   305                                                           else:
   306                                                               mu += gmin
   307      2052         8107      4.0      0.0                  if lr > 0:
   308                                                               g[indr] += gamma[indr] * gmin
   309      2052         9829      4.8      0.0                  gc += gammac * gmin
   310      2052        12555      6.1      0.0                  if imin == 0: # min = gsmin => move k from s to r
   311                                                               # if there are more than 1 minimum, just take 1
   312                                                               ak = a[inds][ismin]
   313                                           
   314                                                               # delete the elements from X,a and g
   315                                                               # => add it to the end of X,a,g
   316                                                               ind_del = inds[ismin]
   317                                                               inds.remove(ind_del)
   318                                                               c_inds = [start_new] + inds
   319                                                               indr.append(ind_del)
   320                                                               if ak < e:
   321                                                                   indo.append(ind_del)
   322                                                                   lo += 1
   323                                                               else:
   324                                                                   inde.append(ind_del)
   325                                                                   le += 1
   326                                           
   327                                                               lr += 1
   328                                                               #decrement R, delete row ismin and column ismin
   329                                           
   330                                                               if ls > 2:
   331                                                                   ismin += 1
   332                                                                   for i in range(ls + 1):
   333                                                                       for j in range(ls + 1):
   334                                                                           if i != ismin and j != ismin:
   335                                                                               R[i][j] = R[i][j] - R[i][ismin] * R[ismin][j] / R[ismin][ismin]
   336                                           
   337                                                                   R_new = zeros((ls,ls))
   338                                                                   R_new[0:ismin, 0:ismin] = R[0:ismin, 0:ismin]
   339                                                                   R_new[ismin:, 0:ismin] = R[ismin+1:,0:ismin]
   340                                                                   R_new[0:ismin, ismin:] = R[0:ismin, ismin+1:]
   341                                                                   R_new[ismin:, ismin:] = R[ismin+1:, ismin+1:]
   342                                                                   R = R_new
   343                                                               elif ls == 2:
   344                                                                   R = ones((2, 2))
   345                                                                   R[1,1] = 0
   346                                                                   R[0,0] = -1
   347                                                               else:
   348                                                                   R = inf
   349                                                               ls -= 1
   350                                           
   351      2052         9911      4.8      0.0                  elif imin == 1:
   352                                                               # delete the elements from X,a and g => add it to the end of X,a,g
   353                                                               Ieplus_l = [i for i,b in enumerate(Ie_plus) if b]
   354                                                               ind_del = inde[Ieplus_l[iemin]]
   355                                                               if ls > 0:
   356                                                                   nk = K_X[ind_del, :][[ind_del] + inds]
   357                                                                   betak = - R.dot(nk)
   358                                                                   betak1 = ones(ls + 2)
   359                                                                   betak1[:-1] = betak
   360                                                                   R_old = R
   361                                                                   R = zeros((ls +2, ls +2))
   362                                                                   R[:-1, :-1] = R_old
   363                                                                   R += 1/(1 - nk.dot(R_old).dot(nk)) * outer(betak1, betak1)
   364                                                               else:
   365                                                                   R = ones((2, 2))
   366                                                                   R[1,1] = 0
   367                                                                   R[0,0] = -1
   368                                                               inds.append(ind_del)
   369                                                               c_inds = [start_new] + inds
   370                                                               indr.remove(ind_del)
   371                                                               inde.remove(ind_del)
   372                                                               ls += 1
   373                                                               lr -= 1
   374                                                               le -= 1
   375                                           
   376      2052         9472      4.6      0.0                  elif imin == 2: # min = gemin | gomin => move k from r to s
   377                                           
   378                                                               # delete the elements from X,a and g => add it to the end of X,a,g
   379                                                               Io_minus_l = [i for i,b in enumerate(Io_minus) if b]
   380                                                               ind_del = indo[Io_minus_l[iomin]]
   381                                                               if ls > 0:
   382                                                                   nk = ones(ls+1)
   383                                                                   nk[1:] = K_X[ind_del,:][inds]
   384                                                                   betak = - R.dot(nk)
   385                                                                   k = 1 - nk.dot(R).dot(nk)
   386                                                                   betak1 = ones(ls+2)
   387                                                                   betak1[:-1] = betak
   388                                                                   R_old = R
   389                                                                   R = zeros((ls+2, ls+2))
   390                                                                   R[:-1,:-1] = R_old
   391                                                                   R += 1/k * outer(betak1, betak1)
   392                                                               else:
   393                                                                   R = ones((2, 2))
   394                                                                   R[1,1] = 0
   395                                                                   R[0,0] = -1
   396                                           
   397                                                               indo.remove(ind_del)
   398                                                               indr.remove(ind_del)
   399                                                               inds.append(ind_del)
   400                                                               c_inds = [start_new] + inds
   401                                                               lo -= 1
   402                                                               lr -= 1
   403                                                               ls += 1
   404      2052         9402      4.6      0.0                  elif imin == 3:
   405      2052         7566      3.7      0.0                      if ls > 0:
   406      2052        44508     21.7      0.0                          nk = ones(ls+1)
   407      2052       967879    471.7      0.1                          nk[1:] = K_X[start_new, :][inds]
   408                                           
   409      2052     17308339   8434.9      1.6                          betak = - R.dot(nk)
   410      2052      2147067   1046.3      0.2                          k = 1 - nk.dot(R).dot(nk)
   411      2052        56817     27.7      0.0                          betak1 = ones(ls + 2)
   412      2052        21896     10.7      0.0                          betak1[:-1] = betak
   413      2052      4098574   1997.4      0.4                          R_old = R
   414      2052     45411670  22130.4      4.3                          R = zeros((ls +2, ls +2))
   415      2052     26203919  12769.9      2.5                          R[:-1,:-1] = R_old
   416      2052    156257000  76148.6     14.9                          R += 1/k * outer(betak1, betak1)
   417                                                               else:
   418                                                                   R = ones((2, 2))
   419                                                                   R[1,1] = 0
   420                                                                   R[0,0] = -1
   421      2052        17481      8.5      0.0                      break
   422                                                           else:
   423                                                               break
   424                                                           loop_count += 1
   425      2052        14789      7.2      0.0              a[start_new] = ac
   426      2052         9204      4.5      0.0              g[start_new] = gc
   427      2052        34275     16.7      0.0              if ac < e:
   428                                                           indr.append(start_new)
   429                                                           indo.append(start_new)
   430                                                           lr += 1
   431                                                           lo += 1
   432      2052        14374      7.0      0.0              elif ac > C - e:
   433                                                           indr.append(start_new)
   434                                                           inde.append(start_new)
   435                                                           lr += 1
   436                                                           le += 1
   437                                                       else:
   438      2052        13319      6.5      0.0                  inds.append(start_new)
   439      2052         7898      3.8      0.0                  ls += 1
   440                                           
   441                                                    # update X, a
   442         1           15     15.0      0.0          self._data.set_X(X)
   443         1            7      7.0      0.0          self._data.set_alpha(a)
   444         1            6      6.0      0.0          self._data.set_C(C)
   445         1            9      9.0      0.0          self._data.set_K_X(K_X)
   446         1       482330 482330.0      0.0          self.rho()

