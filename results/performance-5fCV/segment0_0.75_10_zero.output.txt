['evaluation_performance.py', '0.75', '10', 'zero', 'segment0']
segment0
data size: 336, nu: 0.75, gamma: 10.0
============ 1. Fold of CV ============
1) Incremental OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          21   56
 1          69  190
precision: 0.772357723577, recall: 0.733590733591, f1-score: 0.752475247525
Number of support vectors: 4
-----------
2) cvxopt-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          22   55
 1          61  198
precision: 0.782608695652, recall: 0.764478764479, f1-score: 0.7734375
Number of support vectors: 12
---------
3) sklearn-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          21   56
 1          70  189
Number of support vectors: 202
precision: 0.771428571429, recall: 0.72972972973, f1-score: 0.75
============ 2. Fold of CV ============
1) Incremental OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          23   54
 1          62  197
precision: 0.784860557769, recall: 0.760617760618, f1-score: 0.772549019608
Number of support vectors: 3
-----------
2) cvxopt-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          23   54
 1          65  194
precision: 0.782258064516, recall: 0.749034749035, f1-score: 0.765285996055
Number of support vectors: 10
---------
3) sklearn-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          22   55
 1          62  197
Number of support vectors: 203
precision: 0.781746031746, recall: 0.760617760618, f1-score: 0.771037181996
============ 3. Fold of CV ============
1) Incremental OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           6   71
 1          70  189
precision: 0.726923076923, recall: 0.72972972973, f1-score: 0.728323699422
Number of support vectors: 2
-----------
2) cvxopt-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          11   66
 1          73  186
precision: 0.738095238095, recall: 0.718146718147, f1-score: 0.727984344423
Number of support vectors: 7
---------
3) sklearn-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           6   71
 1          71  188
Number of support vectors: 203
precision: 0.725868725869, recall: 0.725868725869, f1-score: 0.725868725869
============ 4. Fold of CV ============
1) Incremental OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           2   75
 1          64  195
precision: 0.722222222222, recall: 0.752895752896, f1-score: 0.737240075614
Number of support vectors: 4
-----------
2) cvxopt-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          13   64
 1          64  195
precision: 0.752895752896, recall: 0.752895752896, f1-score: 0.752895752896
Number of support vectors: 8
---------
3) sklearn-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           2   75
 1          65  194
Number of support vectors: 204
precision: 0.721189591078, recall: 0.749034749035, f1-score: 0.734848484848
============ 5. Fold of CV ============
1) Incremental OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          14   63
 1          54  205
precision: 0.764925373134, recall: 0.791505791506, f1-score: 0.777988614801
Number of support vectors: 1
-----------
2) cvxopt-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          23   54
 1          41  218
precision: 0.801470588235, recall: 0.841698841699, f1-score: 0.821092278719
Number of support vectors: 2
---------
3) sklearn-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          15   62
 1          55  204
Number of support vectors: 202
precision: 0.766917293233, recall: 0.787644787645, f1-score: 0.777142857143
========================================
Average Incremental OCSVM results:
precision: 0.754257790725, recall: 0.753667953668, f1-score: 0.753715331394
Average cvxopt-OCSVM results:
precision: 0.771465667879, recall: 0.765250965251, f1-score: 0.768139174419
Average sklearn-OCSVM results:
precision: 0.753430042671, recall: 0.750579150579, f1-score: 0.751779449971

*** PROFILER RESULTS ***
incremental_ocsvm (evaluation_performance.py:185)
function called 5 times

         35031 function calls in 1.090 seconds

   Ordered by: cumulative time, internal time, call count
   List reduced from 147 to 40 due to restriction <40>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        5    0.000    0.000    1.090    0.218 evaluation_performance.py:185(incremental_ocsvm)
        5    0.490    0.098    0.628    0.126 ocsvm_performance.py:98(increment)
        5    0.000    0.000    0.463    0.093 ocsvm_performance.py:35(fit)
        5    0.012    0.002    0.462    0.092 ocsvm_performance.py:62(alpha)
        5    0.000    0.000    0.425    0.085 coneprog.py:4159(qp)
        5    0.009    0.002    0.425    0.085 coneprog.py:1441(coneqp)
       63    0.000    0.000    0.336    0.005 coneprog.py:1984(kktsolver)
       63    0.013    0.000    0.336    0.005 misc.py:1389(factor)
       63    0.199    0.003    0.199    0.003 {cvxopt.base.syrk}
      126    0.070    0.001    0.070    0.001 {cvxopt.lapack.potrf}
       63    0.051    0.001    0.051    0.001 {cvxopt.base.gemm}
      116    0.000    0.000    0.045    0.000 coneprog.py:2333(f4)
      116    0.001    0.000    0.044    0.000 coneprog.py:2291(f4_no_ir)
      895    0.044    0.000    0.044    0.000 {method 'remove' of 'list' objects}
      121    0.001    0.000    0.044    0.000 misc.py:1489(solve)
       10    0.000    0.000    0.041    0.004 ocsvm_performance.py:58(gram)
       10    0.000    0.000    0.041    0.004 pairwise.py:1164(pairwise_kernels)
       10    0.000    0.000    0.041    0.004 pairwise.py:949(_parallel_pairwise)
       10    0.029    0.003    0.041    0.004 pairwise.py:740(rbf_kernel)
      736    0.039    0.000    0.039    0.000 {cvxopt.base.gemv}
     3268    0.031    0.000    0.031    0.000 {min}
      242    0.014    0.000    0.014    0.000 {cvxopt.blas.trsv}
      984    0.001    0.000    0.014    0.000 numeric.py:167(asarray)
     1124    0.014    0.000    0.014    0.000 {numpy.core.multiarray.array}
      126    0.000    0.000    0.013    0.000 coneprog.py:1900(fG)
      126    0.001    0.000    0.013    0.000 misc.py:801(sgemv)
       10    0.006    0.001    0.011    0.001 pairwise.py:136(euclidean_distances)
     2497    0.008    0.000    0.008    0.000 {method 'dot' of 'numpy.ndarray' objects}
       10    0.000    0.000    0.007    0.001 shape_base.py:177(vstack)
       10    0.006    0.001    0.006    0.001 {numpy.core.multiarray.concatenate}
       63    0.000    0.000    0.006    0.000 coneprog.py:1847(fP)
      323    0.004    0.000    0.005    0.000 numeric.py:740(outer)
       63    0.005    0.000    0.005    0.000 {cvxopt.base.symv}
     1230    0.002    0.000    0.005    0.000 numeric.py:1791(ones)
       58    0.003    0.000    0.005    0.000 misc.py:422(update_scaling)
       10    0.000    0.000    0.005    0.000 extmath.py:171(safe_sparse_dot)
       10    0.000    0.000    0.005    0.000 extmath.py:129(fast_dot)
       10    0.003    0.000    0.005    0.000 extmath.py:97(_fast_dot)
     3069    0.004    0.000    0.004    0.000 {numpy.core.multiarray.where}
       40    0.000    0.000    0.002    0.000 validation.py:268(check_array)



*** PROFILER RESULTS ***
cvxopt_ocsvm (evaluation_performance.py:181)
function called 5 times

         12376 function calls in 1.956 seconds

   Ordered by: cumulative time, internal time, call count
   List reduced from 123 to 40 due to restriction <40>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        5    0.000    0.000    1.956    0.391 evaluation_performance.py:181(cvxopt_ocsvm)
        5    0.004    0.001    1.956    0.391 ocsvm_performance.py:35(fit)
        5    0.045    0.009    1.946    0.389 ocsvm_performance.py:62(alpha)
        5    0.001    0.000    1.831    0.366 coneprog.py:4159(qp)
        5    0.011    0.002    1.830    0.366 coneprog.py:1441(coneqp)
       57    0.000    0.000    1.619    0.028 coneprog.py:1984(kktsolver)
       57    0.036    0.001    1.618    0.028 misc.py:1389(factor)
       57    0.904    0.016    0.904    0.016 {cvxopt.base.syrk}
       57    0.438    0.008    0.438    0.008 {cvxopt.base.gemm}
      114    0.231    0.002    0.231    0.002 {cvxopt.lapack.potrf}
      664    0.125    0.000    0.125    0.000 {cvxopt.base.gemv}
      109    0.002    0.000    0.122    0.001 misc.py:1489(solve)
      104    0.000    0.000    0.120    0.001 coneprog.py:2333(f4)
      104    0.001    0.000    0.120    0.001 coneprog.py:2291(f4_no_ir)
       10    0.000    0.000    0.050    0.005 ocsvm_performance.py:58(gram)
       10    0.000    0.000    0.050    0.005 pairwise.py:1164(pairwise_kernels)
       10    0.000    0.000    0.050    0.005 pairwise.py:949(_parallel_pairwise)
       10    0.034    0.003    0.050    0.005 pairwise.py:740(rbf_kernel)
      114    0.000    0.000    0.042    0.000 coneprog.py:1900(fG)
      114    0.001    0.000    0.042    0.000 misc.py:801(sgemv)
      218    0.036    0.000    0.036    0.000 {cvxopt.blas.trsv}
       10    0.000    0.000    0.021    0.002 shape_base.py:177(vstack)
       10    0.019    0.002    0.019    0.002 {numpy.core.multiarray.concatenate}
       10    0.007    0.001    0.015    0.001 pairwise.py:136(euclidean_distances)
       57    0.000    0.000    0.013    0.000 coneprog.py:1847(fP)
       57    0.013    0.000    0.013    0.000 {cvxopt.base.symv}
       57    0.007    0.000    0.007    0.000 {cvxopt.blas.trsm}
       52    0.005    0.000    0.007    0.000 misc.py:422(update_scaling)
       10    0.000    0.000    0.007    0.001 extmath.py:171(safe_sparse_dot)
       10    0.000    0.000    0.007    0.001 extmath.py:129(fast_dot)
       10    0.005    0.001    0.007    0.001 extmath.py:97(_fast_dot)
        5    0.000    0.000    0.005    0.001 ocsvm_performance.py:45(rho)
       10    0.000    0.000    0.003    0.000 twodim_base.py:220(diag)
       20    0.003    0.000    0.003    0.000 {numpy.core.multiarray.zeros}
       50    0.000    0.000    0.003    0.000 validation.py:268(check_array)
      312    0.002    0.000    0.002    0.000 {cvxopt.misc_solvers.scale2}
      317    0.002    0.000    0.002    0.000 {cvxopt.misc_solvers.scale}
       20    0.000    0.000    0.002    0.000 pairwise.py:57(check_pairwise_arrays)
      195    0.001    0.000    0.002    0.000 {numpy.core.multiarray.array}
      961    0.002    0.000    0.002    0.000 {cvxopt.blas.axpy}



*** PROFILER RESULTS ***
sklearn_ocsvm (evaluation_performance.py:177)
function called 5 times

         305 function calls in 0.030 seconds

   Ordered by: cumulative time, internal time, call count

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        5    0.000    0.000    0.030    0.006 evaluation_performance.py:177(sklearn_ocsvm)
        5    0.000    0.000    0.030    0.006 classes.py:941(fit)
        5    0.000    0.000    0.030    0.006 base.py:99(fit)
        5    0.000    0.000    0.029    0.006 base.py:211(_dense_fit)
        5    0.029    0.006    0.029    0.006 {sklearn.svm.libsvm.fit}
        5    0.000    0.000    0.000    0.000 validation.py:268(check_array)
       25    0.000    0.000    0.000    0.000 {numpy.core.multiarray.array}
       10    0.000    0.000    0.000    0.000 numeric.py:167(asarray)
        5    0.000    0.000    0.000    0.000 validation.py:43(_assert_all_finite)
       10    0.000    0.000    0.000    0.000 base.py:553(isspmatrix)
        5    0.000    0.000    0.000    0.000 base.py:193(_validate_targets)
       10    0.000    0.000    0.000    0.000 sputils.py:116(_isinstance)
        5    0.000    0.000    0.000    0.000 validation.py:126(_shape_repr)
        5    0.000    0.000    0.000    0.000 shape_base.py:58(atleast_2d)
        5    0.000    0.000    0.000    0.000 {method 'sum' of 'numpy.ndarray' objects}
        5    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        5    0.000    0.000    0.000    0.000 numeric.py:1791(ones)
        5    0.000    0.000    0.000    0.000 getlimits.py:234(__init__)
       10    0.000    0.000    0.000    0.000 {numpy.core.multiarray.empty}
       10    0.000    0.000    0.000    0.000 numeric.py:237(asanyarray)
       15    0.000    0.000    0.000    0.000 validation.py:153(<genexpr>)
        5    0.000    0.000    0.000    0.000 validation.py:105(_num_samples)
        5    0.000    0.000    0.000    0.000 {method 'randint' of 'mtrand.RandomState' objects}
        5    0.000    0.000    0.000    0.000 validation.py:503(check_random_state)
       20    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
       15    0.000    0.000    0.000    0.000 {hasattr}
        5    0.000    0.000    0.000    0.000 {method 'fill' of 'numpy.ndarray' objects}
        5    0.000    0.000    0.000    0.000 {method 'copy' of 'numpy.ndarray' objects}
        5    0.000    0.000    0.000    0.000 {sklearn.svm.libsvm.set_verbosity_wrap}
        5    0.000    0.000    0.000    0.000 base.py:203(_warn_from_fit_status)
       30    0.000    0.000    0.000    0.000 {len}
       15    0.000    0.000    0.000    0.000 {isinstance}
        5    0.000    0.000    0.000    0.000 getlimits.py:259(max)
        5    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        5    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}
        5    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
       10    0.000    0.000    0.000    0.000 {callable}
        0    0.000             0.000          profile:0(profiler)


