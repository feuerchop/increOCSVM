['evaluation_performance.py', '0.9', '3', 'zero', 'haberman']
haberman
data size: 336, nu: 0.9, gamma: 3.0
============ 1. Fold of CV ============
1) Incremental OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           9   68
 1          26  233
precision: 0.774086378738, recall: 0.899613899614, f1-score: 0.832142857143
Number of support vectors: 1
-----------
2) cvxopt-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           9   68
 1          26  233
precision: 0.774086378738, recall: 0.899613899614, f1-score: 0.832142857143
Number of support vectors: 4
---------
3) sklearn-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           9   68
 1          27  232
Number of support vectors: 242
precision: 0.773333333333, recall: 0.895752895753, f1-score: 0.830053667263
============ 2. Fold of CV ============
1) Incremental OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          10   67
 1          29  230
precision: 0.774410774411, recall: 0.888030888031, f1-score: 0.827338129496
Number of support vectors: 2
-----------
2) cvxopt-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           8   69
 1          33  226
precision: 0.766101694915, recall: 0.872586872587, f1-score: 0.815884476534
Number of support vectors: 16
---------
3) sklearn-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1          10   67
 1          28  231
Number of support vectors: 243
precision: 0.775167785235, recall: 0.891891891892, f1-score: 0.829443447038
============ 3. Fold of CV ============
1) Incremental OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           1   76
 1          27  232
precision: 0.753246753247, recall: 0.895752895753, f1-score: 0.818342151675
Number of support vectors: 2
-----------
2) cvxopt-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           1   76
 1          30  229
precision: 0.750819672131, recall: 0.88416988417, f1-score: 0.812056737589
Number of support vectors: 7
---------
3) sklearn-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           1   76
 1          25  234
Number of support vectors: 244
precision: 0.754838709677, recall: 0.903474903475, f1-score: 0.822495606327
============ 4. Fold of CV ============
1) Incremental OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           1   76
 1          30  229
precision: 0.750819672131, recall: 0.88416988417, f1-score: 0.812056737589
Number of support vectors: 1
-----------
2) cvxopt-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           1   76
 1          32  227
precision: 0.749174917492, recall: 0.876447876448, f1-score: 0.807829181495
Number of support vectors: 2
---------
3) sklearn-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           1   76
 1          25  234
Number of support vectors: 243
precision: 0.754838709677, recall: 0.903474903475, f1-score: 0.822495606327
============ 5. Fold of CV ============
1) Incremental OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           2   75
 1          29  230
precision: 0.754098360656, recall: 0.888030888031, f1-score: 0.815602836879
Number of support vectors: 3
-----------
2) cvxopt-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           9   68
 1          18  241
precision: 0.779935275081, recall: 0.930501930502, f1-score: 0.848591549296
Number of support vectors: 13
---------
3) sklearn-OCSVM
Confusion matrix:
Prediction  -1    1
Target             
-1           2   75
 1          26  233
Number of support vectors: 243
precision: 0.756493506494, recall: 0.899613899614, f1-score: 0.821869488536
========================================
Average Incremental OCSVM results:
precision: 0.761332387836, recall: 0.89111969112, f1-score: 0.821096542557
Average cvxopt-OCSVM results:
precision: 0.764023587671, recall: 0.892664092664, f1-score: 0.823300960411
Average sklearn-OCSVM results:
precision: 0.762934408883, recall: 0.898841698842, f1-score: 0.825271563098

*** PROFILER RESULTS ***
incremental_ocsvm (evaluation_performance.py:185)
function called 5 times

         22576 function calls in 0.924 seconds

   Ordered by: cumulative time, internal time, call count
   List reduced from 147 to 40 due to restriction <40>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        5    0.000    0.000    0.924    0.185 evaluation_performance.py:185(incremental_ocsvm)
        5    0.000    0.000    0.612    0.122 ocsvm_performance.py:35(fit)
        5    0.018    0.004    0.612    0.122 ocsvm_performance.py:62(alpha)
        5    0.000    0.000    0.559    0.112 coneprog.py:4159(qp)
        5    0.008    0.002    0.559    0.112 coneprog.py:1441(coneqp)
       52    0.000    0.000    0.464    0.009 coneprog.py:1984(kktsolver)
       52    0.015    0.000    0.464    0.009 misc.py:1389(factor)
        5    0.227    0.045    0.311    0.062 ocsvm_performance.py:98(increment)
       52    0.287    0.006    0.287    0.006 {cvxopt.base.syrk}
      104    0.092    0.001    0.092    0.001 {cvxopt.lapack.potrf}
       52    0.066    0.001    0.066    0.001 {cvxopt.base.gemm}
       94    0.000    0.000    0.049    0.001 coneprog.py:2333(f4)
       99    0.001    0.000    0.049    0.000 misc.py:1489(solve)
       94    0.000    0.000    0.049    0.001 coneprog.py:2291(f4_no_ir)
       10    0.000    0.000    0.048    0.005 ocsvm_performance.py:58(gram)
       10    0.000    0.000    0.048    0.005 pairwise.py:1164(pairwise_kernels)
       10    0.000    0.000    0.048    0.005 pairwise.py:949(_parallel_pairwise)
       10    0.033    0.003    0.048    0.005 pairwise.py:740(rbf_kernel)
      604    0.045    0.000    0.045    0.000 {cvxopt.base.gemv}
      400    0.029    0.000    0.029    0.000 {method 'remove' of 'list' objects}
      198    0.016    0.000    0.016    0.000 {cvxopt.blas.trsv}
      104    0.000    0.000    0.015    0.000 coneprog.py:1900(fG)
      104    0.001    0.000    0.015    0.000 misc.py:801(sgemv)
       10    0.007    0.001    0.013    0.001 pairwise.py:136(euclidean_distances)
     1427    0.011    0.000    0.011    0.000 {min}
       10    0.000    0.000    0.009    0.001 shape_base.py:177(vstack)
       10    0.008    0.001    0.008    0.001 {numpy.core.multiarray.concatenate}
      691    0.006    0.000    0.007    0.000 {numpy.core.multiarray.array}
      551    0.001    0.000    0.007    0.000 numeric.py:167(asarray)
       52    0.000    0.000    0.006    0.000 coneprog.py:1847(fP)
       52    0.006    0.000    0.006    0.000 {cvxopt.base.symv}
       10    0.000    0.000    0.006    0.001 extmath.py:171(safe_sparse_dot)
       10    0.000    0.000    0.006    0.001 extmath.py:129(fast_dot)
       10    0.004    0.000    0.006    0.001 extmath.py:97(_fast_dot)
       47    0.003    0.000    0.005    0.000 misc.py:422(update_scaling)
      989    0.004    0.000    0.004    0.000 {method 'dot' of 'numpy.ndarray' objects}
      198    0.003    0.000    0.004    0.000 numeric.py:740(outer)
       52    0.003    0.000    0.003    0.000 {cvxopt.blas.trsm}
       40    0.000    0.000    0.002    0.000 validation.py:268(check_array)
      506    0.001    0.000    0.002    0.000 numeric.py:1791(ones)



*** PROFILER RESULTS ***
cvxopt_ocsvm (evaluation_performance.py:181)
function called 5 times

         11704 function calls in 2.031 seconds

   Ordered by: cumulative time, internal time, call count
   List reduced from 123 to 40 due to restriction <40>

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        5    0.000    0.000    2.031    0.406 evaluation_performance.py:181(cvxopt_ocsvm)
        5    0.005    0.001    2.031    0.406 ocsvm_performance.py:35(fit)
        5    0.052    0.010    2.021    0.404 ocsvm_performance.py:62(alpha)
        5    0.001    0.000    1.895    0.379 coneprog.py:4159(qp)
        5    0.010    0.002    1.894    0.379 coneprog.py:1441(coneqp)
       53    0.000    0.000    1.687    0.032 coneprog.py:1984(kktsolver)
       53    0.036    0.001    1.686    0.032 misc.py:1389(factor)
       53    0.960    0.018    0.960    0.018 {cvxopt.base.syrk}
       53    0.442    0.008    0.442    0.008 {cvxopt.base.gemm}
      106    0.239    0.002    0.239    0.002 {cvxopt.lapack.potrf}
      616    0.123    0.000    0.123    0.000 {cvxopt.base.gemv}
      101    0.002    0.000    0.118    0.001 misc.py:1489(solve)
       96    0.000    0.000    0.117    0.001 coneprog.py:2333(f4)
       96    0.001    0.000    0.116    0.001 coneprog.py:2291(f4_no_ir)
       10    0.000    0.000    0.053    0.005 ocsvm_performance.py:58(gram)
       10    0.000    0.000    0.053    0.005 pairwise.py:1164(pairwise_kernels)
       10    0.000    0.000    0.053    0.005 pairwise.py:949(_parallel_pairwise)
       10    0.036    0.004    0.052    0.005 pairwise.py:740(rbf_kernel)
      106    0.000    0.000    0.044    0.000 coneprog.py:1900(fG)
      106    0.001    0.000    0.044    0.000 misc.py:801(sgemv)
      202    0.036    0.000    0.036    0.000 {cvxopt.blas.trsv}
       10    0.000    0.000    0.021    0.002 shape_base.py:177(vstack)
       10    0.019    0.002    0.019    0.002 {numpy.core.multiarray.concatenate}
       10    0.007    0.001    0.016    0.002 pairwise.py:136(euclidean_distances)
       53    0.000    0.000    0.013    0.000 coneprog.py:1847(fP)
       53    0.013    0.000    0.013    0.000 {cvxopt.base.symv}
       53    0.007    0.000    0.007    0.000 {cvxopt.blas.trsm}
       10    0.000    0.000    0.007    0.001 extmath.py:171(safe_sparse_dot)
       10    0.000    0.000    0.007    0.001 extmath.py:129(fast_dot)
       10    0.006    0.001    0.007    0.001 extmath.py:97(_fast_dot)
       48    0.004    0.000    0.007    0.000 misc.py:422(update_scaling)
        5    0.000    0.000    0.005    0.001 ocsvm_performance.py:45(rho)
       10    0.000    0.000    0.003    0.000 twodim_base.py:220(diag)
       20    0.003    0.000    0.003    0.000 {numpy.core.multiarray.zeros}
       50    0.000    0.000    0.003    0.000 validation.py:268(check_array)
      288    0.002    0.000    0.002    0.000 {cvxopt.misc_solvers.scale2}
       20    0.000    0.000    0.002    0.000 pairwise.py:57(check_pairwise_arrays)
      293    0.002    0.000    0.002    0.000 {cvxopt.misc_solvers.scale}
      195    0.001    0.000    0.002    0.000 {numpy.core.multiarray.array}
      889    0.002    0.000    0.002    0.000 {cvxopt.blas.axpy}



*** PROFILER RESULTS ***
sklearn_ocsvm (evaluation_performance.py:177)
function called 5 times

         305 function calls in 0.031 seconds

   Ordered by: cumulative time, internal time, call count

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        5    0.000    0.000    0.031    0.006 evaluation_performance.py:177(sklearn_ocsvm)
        5    0.000    0.000    0.031    0.006 classes.py:941(fit)
        5    0.000    0.000    0.031    0.006 base.py:99(fit)
        5    0.000    0.000    0.030    0.006 base.py:211(_dense_fit)
        5    0.030    0.006    0.030    0.006 {sklearn.svm.libsvm.fit}
        5    0.000    0.000    0.000    0.000 validation.py:268(check_array)
       25    0.000    0.000    0.000    0.000 {numpy.core.multiarray.array}
       10    0.000    0.000    0.000    0.000 numeric.py:167(asarray)
        5    0.000    0.000    0.000    0.000 validation.py:43(_assert_all_finite)
       10    0.000    0.000    0.000    0.000 base.py:553(isspmatrix)
        5    0.000    0.000    0.000    0.000 base.py:193(_validate_targets)
       10    0.000    0.000    0.000    0.000 sputils.py:116(_isinstance)
        5    0.000    0.000    0.000    0.000 validation.py:126(_shape_repr)
        5    0.000    0.000    0.000    0.000 shape_base.py:58(atleast_2d)
        5    0.000    0.000    0.000    0.000 {method 'sum' of 'numpy.ndarray' objects}
        5    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        5    0.000    0.000    0.000    0.000 numeric.py:1791(ones)
        5    0.000    0.000    0.000    0.000 getlimits.py:234(__init__)
       15    0.000    0.000    0.000    0.000 validation.py:153(<genexpr>)
       10    0.000    0.000    0.000    0.000 {numpy.core.multiarray.empty}
       10    0.000    0.000    0.000    0.000 numeric.py:237(asanyarray)
        5    0.000    0.000    0.000    0.000 validation.py:105(_num_samples)
        5    0.000    0.000    0.000    0.000 {method 'randint' of 'mtrand.RandomState' objects}
        5    0.000    0.000    0.000    0.000 validation.py:503(check_random_state)
       15    0.000    0.000    0.000    0.000 {hasattr}
       20    0.000    0.000    0.000    0.000 {method 'split' of 'str' objects}
        5    0.000    0.000    0.000    0.000 getlimits.py:259(max)
        5    0.000    0.000    0.000    0.000 {method 'fill' of 'numpy.ndarray' objects}
        5    0.000    0.000    0.000    0.000 {method 'copy' of 'numpy.ndarray' objects}
        5    0.000    0.000    0.000    0.000 {sklearn.svm.libsvm.set_verbosity_wrap}
        5    0.000    0.000    0.000    0.000 base.py:203(_warn_from_fit_status)
        5    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}
       30    0.000    0.000    0.000    0.000 {len}
       15    0.000    0.000    0.000    0.000 {isinstance}
       10    0.000    0.000    0.000    0.000 {callable}
        5    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        5    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        0    0.000             0.000          profile:0(profiler)


