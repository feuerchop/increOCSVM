size: 1000
Confusion matrix:
[[  0   0]
 [ 10 990]]
precision: 1.0, recall: 0.99, f1-score: 0.994974874372
Wrote profile results to evaluation_2.py.lprof
Timer unit: 1e-06 s

Total time: 0.961764 s
File: ../ocsvm.py
Function: increment at line 97


kc kernel calculation
gr gradient
be beta
ga gamma
in indexing
of mu calculation
mi minimum incremental

ma memory access

nv new variable
st store variable

uR update R
up update a,g

ot other
Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
nv   100         1            5      5.0      0.0          e = self._data._e
nv   101         1            3      3.0      0.0          mu = 0
ma   104         1            6      6.0      0.0          X_origin = self._data.X()
ma   105         1            5      5.0      0.0          K_X_origin = self._data.K_X()
ot   106         1            4      4.0      0.0          n_data = X_origin.shape[0]
ot   107         1            3      3.0      0.0          n_feature = X_origin.shape[1]
ma   109         1            5      5.0      0.0          C = self._data.C()
ma   110         1            5      5.0      0.0          a_origin = self._data.alpha()
ot   113         1            3      3.0      0.0          n_new = Xc.shape[0]
ot   116         1            3      3.0      0.0          n_all = n_data + n_new
ot   119         1            6      6.0      0.0          X = empty((n_new + n_data, n_feature))
ot   120         1           14     14.0      0.0          X[0:n_new, :] = Xc
ot   121         1            5      5.0      0.0          X[n_new:, :] = X_origin
kc   126         1            3      3.0      0.0          if K_X_origin == None:
kc   127         1        80628  80628.0      8.4              K_X = self.gram(X)
kc   129                                                       K_X = empty((n_all, n_all))
kc   130                                                       K_X[n_new:, n_new:] = K_X_origin
kc   131                                                       K_X_new = self.gram(Xc, X_origin)
kc   132                                                       K_X[0:n_new, :] = K_X_new
kc   133                                                       K_X[:, 0:n_new] = K_X_new.T
nv   136         1           21     21.0      0.0          a = empty(n_all)
nv   137         1           10     10.0      0.0          a[n_new:] = a_origin
nv   138         1           12     12.0      0.0          a[:n_new] = init_ac
gr   141         1            9      9.0      0.0          g = zeros(n_all)
ga   144         1            6      6.0      0.0          gamma = empty(n_all)
ot   145         1            3      3.0      0.0          check_gradient = False
ot   147       990         3224      3.3      0.3          for x_count in range(n_new):
ot   151       989         3062      3.1      0.3              if x_count == break_count:
ot   160       989         3133      3.2      0.3              start_origin = n_new - x_count
ot   161       989         3076      3.1      0.3              start_new = start_origin - 1
in   163       989         3104      3.1      0.3              if x_count == 0:
in   164         1            3      3.0      0.0                  inds = []
in   165         1            4      4.0      0.0                  indr = []
in   166         1            3      3.0      0.0                  inde = []
in   167         1            4      4.0      0.0                  indo = []
in   168        12           39      3.2      0.0                  for i in range(n_new, n_all):
in   169        11           70      6.4      0.0                      if e < a[i] < C - e:
in   170         1            3      3.0      0.0                          inds.append(i)
in   171                                                               else:
in   172        10           35      3.5      0.0                          indr.append(i)
in   173        10           42      4.2      0.0                          if a[i] <= e:
in   174                                                                       indo.append(i)
in   175                                                                   else:
in   176        10           34      3.4      0.0                              inde.append(i)
in   178         1            4      4.0      0.0                  ls = len(inds)                               # support vectors length
in   179         1            4      4.0      0.0                  lr = len(indr)                               # error and non-support vectors length
in   180         1            3      3.0      0.0                  le = len(inde)                               # error vectors lenght
in   181         1            3      3.0      0.0                  lo = len(indo)
of   183         1           60     60.0      0.0                  mu = - K_X[inds[0], :][start_origin:].dot(a[start_origin:])
ga   184         1            3      3.0      0.0                  if lr > 0:
ga   185         1          613    613.0      0.1                      g[indr] = K_X[indr, :][:, start_origin:].dot(a[start_origin:]) + mu
in   189       989         3807      3.8      0.4              c_inds = [start_new] + inds
kc   192       989       228554    231.1     23.8              Kss = K_X[:, inds][inds, :]
gr   200       989         3285      3.3      0.3              if ls > 0:
gr   201       989        17797     18.0      1.9                  gc = K_X[start_new, start_origin:].dot(a[start_origin:]) + mu
nv   202                                           
QR   205       989         3166      3.2      0.3              if x_count == 0:
QR   206         1           19     19.0      0.0                  Q = ones((ls+1, ls+1))
QR   207         1            4      4.0      0.0                  Q[0, 0] = 0
QR   208         1           13     13.0      0.0                  Q[1:, 1:] = Kss
QR   209         1            3      3.0      0.0                  try:
QR   210         1          216    216.0      0.0                      R = inv(Q)
QR   211                                                           except np.linalg.linalg.LinAlgError:
QR   212                                                               x = 1e-11
QR   213                                                               found = False
QR   214                                                               print "singular matrix"
ot   221       989         3150      3.2      0.3              loop_count = 1
ot   222      1178         6519      5.5      0.7              while gc < e and ac < C - e:
ot   223       263          872      3.3      0.1                  if ls == 0: check_gradient = True
be   226       263          848      3.2      0.1                  if ls > 0:
be   227       259         5197     20.1      0.5                      n = K_X[start_new, :][c_inds]
be   228       259         2937     11.3      0.3                      beta = - R.dot(n)
be   229       259         1203      4.6      0.1                      betas = beta[1:]
ga   232       263          891      3.4      0.1                  if lr > 0 and ls > 0:
ga   233       259        52845    204.0      5.5                      gamma_tmp = K_X[:, c_inds][start_new:]
ga   234       259         2094      8.1      0.2                      gamma_tmp[:, 0] = 1
ga   235       259         7924     30.6      0.8                      gamma[start_new:] = gamma_tmp.dot(beta) + K_X[start_new, :][start_new:]
ga   236       259         1042      4.0      0.1                      gammac = gamma[start_new]
ga   238         4           13      3.2      0.0                  elif ls > 0:
ga   240                                                               gammac = K_X[start_new, :][:, c_inds].dot(beta) + 1
ga   242                                                           else:
ga   244         4           13      3.2      0.0                      gammac = 1
ga   245         4           69     17.2      0.0                      gamma[indr] = 1
ga   246                                                               #gamma[indo] = -1
mi   250       263          874      3.3      0.1                  if ls > 0:
mi   251       259         2338      9.0      0.2                      IS_plus = betas > e
mi   252       259         1983      7.7      0.2                      IS_minus = betas < - e
mi   253       259         2726     10.5      0.3                      gsmax = empty(ls)*inf
mi   254       259         6176     23.8      0.6                      gsmax[IS_plus] = -a[inds][IS_plus]
mi   255       259         2648     10.2      0.3                      gsmax[IS_plus] += C
mi   256       259         5390     20.8      0.6                      gsmax[IS_minus] = - a[inds][IS_minus]
mi   257       259         1720      6.6      0.2                      gsmax = divide(gsmax, betas)
mi   258       259         2446      9.4      0.3                      gsmin = min(absolute(gsmax))
mi   260       259         3234     12.5      0.3                      ismin = where(absolute(gsmax) == gsmin)[0][0]
mi   262         4           15      3.8      0.0                  else: gsmin = inf
mi   265       263          898      3.4      0.1                  if le > 0:
mi   266       263         5303     20.2      0.6                      Ie_plus = gamma[inde] > e
mi   267       263         4411     16.8      0.5                      if len(g[inde][Ie_plus]) > 0:
mi   268       262         9015     34.4      0.9                          gec = divide(-g[inde][Ie_plus], gamma[inde][Ie_plus])
mi   269       262         2882     11.0      0.3                          gec[gec <= 0] = inf
mi   270       262         1475      5.6      0.2                          gemin = min(gec)
mi   271       262         1248      4.8      0.1                          if gemin < inf:
mi   272       262         2659     10.1      0.3                              iemin = where(gec == gemin)[0][0]
mi   273         1            4      4.0      0.0                      else: gemin = inf
mi   276       263          950      3.6      0.1                  if lo > 0 and ls > 0:
mi   277       258        20607     79.9      2.1                      Io_minus = gamma[indo] < - e
mi   278       258        20393     79.0      2.1                      if len(g[indo][Io_minus]) > 0:
mi   279       251        41466    165.2      4.3                          goc = divide(-g[indo][Io_minus], gamma[indo][Io_minus])
mi   280       251         3003     12.0      0.3                          goc[goc <= 0] = inf
mi   281       251        22298     88.8      2.3                          goc[g[indo][Io_minus] < 0] = inf
mi   282       251        11457     45.6      1.2                          gomin = min(goc)
mi   283       251         1175      4.7      0.1                          if gomin < inf:
mi   284       251         3376     13.5      0.4                              iomin = where(goc == gomin)[0][0]
mi   285         7           26      3.7      0.0                      else: gomin = inf
mi   286         5           18      3.6      0.0                  else: gomin = inf
mi   289       263         1449      5.5      0.2                  if gammac > e: gcmin = - gc/gammac
mi   293       263         1312      5.0      0.1                  if ls > 0: gacmin = C - ac
mi   294         4           14      3.5      0.0                  else: gacmin = inf
mi   297       263         1079      4.1      0.1                  all_deltas = [gsmin, gemin, gomin, gcmin, gacmin]
mi   298       263         1132      4.3      0.1                  gmin = min(all_deltas)
mi   299       263         5159     19.6      0.5                  imin = where(all_deltas == gmin)[0][0]
up   301       263          912      3.5      0.1                  if ls > 0:
up   302       259         1205      4.7      0.1                      mu += beta[0]*gmin
up   303       259         1009      3.9      0.1                      ac += gmin
up   304       259         8919     34.4      0.9                      a[inds] += betas*gmin
ga   307       263          957      3.6      0.1                  if lr > 0:
ga   308       263        58026    220.6      6.0                      g[indr] += gamma[indr] * gmin
ga   309       263         1192      4.5      0.1                  gc += gammac * gmin
in   310       263         1267      4.8      0.1                  if imin == 0: # min = gsmin => move k from s to r
in   312       107         1704     15.9      0.2                      ak = a[inds][ismin]
in   316       107          399      3.7      0.0                      ind_del = inds[ismin]
in   317       107          455      4.3      0.0                      inds.remove(ind_del)
in   318       107          438      4.1      0.0                      c_inds = [start_new] + inds
in   319       107          385      3.6      0.0                      indr.append(ind_del)
in   320       107          474      4.4      0.0                      if ak < e:
in   321        89          327      3.7      0.0                          indo.append(ind_del)
in   322        89          313      3.5      0.0                          lo += 1
in   324        18           65      3.6      0.0                          inde.append(ind_del)
in   325        18           66      3.7      0.0                          le += 1
in   327       107          386      3.6      0.0                      lr += 1
in   330       107          369      3.4      0.0                      if ls > 2:
uR   331       102          499      4.9      0.1                          ismin += 1
uR   332      1045         4101      3.9      0.4                          for i in range(ls + 1):
uR   333     10100        39659      3.9      4.1                              for j in range(ls + 1):
uR   334      9157        49489      5.4      5.1                                  if i != ismin and j != ismin:
uR   335      7373        74421     10.1      7.7                                      R[i][j] = R[i][j] - R[i][ismin] * R[ismin][j] / R[ismin][ismin]
uR   336                                           
uR   337       102          620      6.1      0.1                          R_new = zeros((ls,ls))
uR   338       102         1235     12.1      0.1                          R_new[0:ismin, 0:ismin] = R[0:ismin, 0:ismin]
uR   339       102         1129     11.1      0.1                          R_new[ismin:, 0:ismin] = R[ismin+1:,0:ismin]
uR   340       102         1070     10.5      0.1                          R_new[0:ismin, ismin:] = R[0:ismin, ismin+1:]
uR   341       102         1149     11.3      0.1                          R_new[ismin:, ismin:] = R[ismin+1:, ismin+1:]
uR   342       102          392      3.8      0.0                          R = R_new
uR   343         5           17      3.4      0.0                      elif ls == 2:
uR   344         1            9      9.0      0.0                          R = ones((2, 2))
uR   345         1            4      4.0      0.0                          R[1,1] = 0
uR   346         1            4      4.0      0.0                          R[0,0] = -1
uR   348         4           16      4.0      0.0                          R = inf
in   349       107          411      3.8      0.0                      ls -= 1
in   351       156          697      4.5      0.1                  elif imin == 1:
in   353       491         1852      3.8      0.2                      Ieplus_l = [i for i,b in enumerate(Ie_plus) if b]
in   354        62          239      3.9      0.0                      ind_del = inde[Ieplus_l[iemin]]
uR   355        62          213      3.4      0.0                      if ls > 0:
uR   356        58         1058     18.2      0.1                          nk = K_X[ind_del, :][[ind_del] + inds]
uR   357        58          647     11.2      0.1                          betak = - R.dot(nk)
uR   358        58          725     12.5      0.1                          betak1 = ones(ls + 2)
uR   359        58          293      5.1      0.0                          betak1[:-1] = betak
uR   360        58          225      3.9      0.0                          R_old = R
uR   361        58          294      5.1      0.0                          R = zeros((ls +2, ls +2))
uR   362        58          462      8.0      0.0                          R[:-1, :-1] = R_old
uR   363        58         2620     45.2      0.3                          R += 1/(1 - nk.dot(R_old).dot(nk)) * outer(betak1, betak1)
uR   365         4           36      9.0      0.0                          R = ones((2, 2))
uR   366         4           16      4.0      0.0                          R[1,1] = 0
uR   367         4           15      3.8      0.0                          R[0,0] = -1
in   368        62          268      4.3      0.0                      inds.append(ind_del)
in   369        62          276      4.5      0.0                      c_inds = [start_new] + inds
in   370        62          513      8.3      0.1                      indr.remove(ind_del)
in   371        62          252      4.1      0.0                      inde.remove(ind_del)
in   372        62          239      3.9      0.0                      ls += 1
in   373        62          243      3.9      0.0                      lr -= 1
in   374        62          259      4.2      0.0                      le -= 1
in   376        94          420      4.5      0.0                  elif imin == 2: # min = gemin | gomin => move k from r to s
in   379      7682        24492      3.2      2.5                      Io_minus_l = [i for i,b in enumerate(Io_minus) if b]
in   380        20           81      4.0      0.0                      ind_del = indo[Io_minus_l[iomin]]
uR   381        20           71      3.5      0.0                      if ls > 0:
uR   382        20          286     14.3      0.0                          nk = ones(ls+1)
uR   383        20          399     19.9      0.0                          nk[1:] = K_X[ind_del,:][inds]
uR   384        20          236     11.8      0.0                          betak = - R.dot(nk)
uR   385        20          253     12.7      0.0                          k = 1 - nk.dot(R).dot(nk)
uR   386        20          195      9.8      0.0                          betak1 = ones(ls+2)
uR   387        20           98      4.9      0.0                          betak1[:-1] = betak
uR   388        20           76      3.8      0.0                          R_old = R
uR   389        20          109      5.5      0.0                          R = zeros((ls+2, ls+2))
uR   390        20          169      8.4      0.0                          R[:-1,:-1] = R_old
uR   391        20          765     38.2      0.1                          R += 1/k * outer(betak1, betak1)
in   397        20          218     10.9      0.0                      indo.remove(ind_del)
in   398        20          195      9.8      0.0                      indr.remove(ind_del)
in   399        20           80      4.0      0.0                      inds.append(ind_del)
in   400        20           95      4.8      0.0                      c_inds = [start_new] + inds
in   401        20           78      3.9      0.0                      lo -= 1
in   402        20           77      3.9      0.0                      lr -= 1
in   403        20           79      4.0      0.0                      ls += 1
in   404        74          325      4.4      0.0                  elif imin == 3:
uR   405        34          126      3.7      0.0                      if ls > 0:
uR   406        34          459     13.5      0.0                          nk = ones(ls+1)
uR   407        34          649     19.1      0.1                          nk[1:] = K_X[start_new, :][inds]
uR   409        34          379     11.1      0.0                          betak = - R.dot(nk)
uR   410        34          424     12.5      0.0                          k = 1 - nk.dot(R).dot(nk)
uR   411        34          331      9.7      0.0                          betak1 = ones(ls + 2)
uR   412        34          172      5.1      0.0                          betak1[:-1] = betak
uR   413        34          138      4.1      0.0                          R_old = R
uR   414        34          186      5.5      0.0                          R = zeros((ls +2, ls +2))
uR   415        34          273      8.0      0.0                          R[:-1,:-1] = R_old
uR   416        34         1285     37.8      0.1                          R += 1/k * outer(betak1, betak1)
uR   421        34          138      4.1      0.0                      break
uR   423        40          146      3.6      0.0                      break
ot   424       189          655      3.5      0.1                  loop_count += 1
nv   425       989         3802      3.8      0.4              a[start_new] = ac
nv   426       989         3692      3.7      0.4              g[start_new] = gc
in   427       989         4478      4.5      0.5              if ac < e:
in   428       915         3706      4.1      0.4                  indr.append(start_new)
in   429       915         3476      3.8      0.4                  indo.append(start_new)
in   430       915         3384      3.7      0.4                  lr += 1
in   431       915         2891      3.2      0.3                  lo += 1
in   432        74          361      4.9      0.0              elif ac > C - e:
in   433        40          172      4.3      0.0                  indr.append(start_new)
in   434        40          154      3.9      0.0                  inde.append(start_new)
in   435        40          148      3.7      0.0                  lr += 1
in   436        40          126      3.1      0.0                  le += 1
in   438        34          142      4.2      0.0                  inds.append(start_new)
in   439        34          115      3.4      0.0                  ls += 1
st   442         1           12     12.0      0.0          self._data.set_X(X)
st   443         1            6      6.0      0.0          self._data.set_alpha(a)
st   444         1            6      6.0      0.0          self._data.set_C(C)
st   445         1            7      7.0      0.0          self._data.set_K_X(K_X)
of   446         1          631    631.0      0.1          self.rho()
